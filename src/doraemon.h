#include <closesound.h>
#include <pitches.h>
// change this to whichever pin you want to use
// change this to make the song slower or faster
int tempo = 160;

// notes of the moledy followed by the duration.
// a 4 means a quarter note, 8 an eighteenth , 16 sixteenth, so on
// !!negative numbers are used to represent dotted notes,
// so -4 means a dotted quarter note, that is, a quarter plus an eighteenth!!
int melody[] = {

    NOTE_D5,
    8,
    NOTE_CS5,
    8,
    NOTE_B4,
    8,
    NOTE_A4,
    8,
    NOTE_B4,
    8,
    NOTE_CS5,
    8,
    NOTE_D5,
    8,
    NOTE_CS5,
    8,
    NOTE_B4,
    8,
    NOTE_A4,
    8,
    NOTE_B4,
    8,
    NOTE_CS5,
    8,
    NOTE_D5,
    8,
    NOTE_CS5,
    8,
    NOTE_B4,
    8,
    NOTE_A4,
    8,
    NOTE_B4,
    8,
    NOTE_CS5,
    8,
    NOTE_D5,
    8,
    NOTE_CS5,
    8,
    NOTE_B4,
    8,
    NOTE_A4,
    8,
    REST,
    8,
    REST,
    8,
    NOTE_E5,
    8,
    NOTE_D5,
    8,
    NOTE_CS5,
    8,
    NOTE_B4,
    8,
    NOTE_CS5,
    8,
    NOTE_D5,
    8,
    NOTE_E5,
    8,
    NOTE_D5,
    8,
    NOTE_CS5,
    8,
    NOTE_B4,
    8,
    NOTE_CS5,
    8,
    NOTE_D5,
    8,
    NOTE_E5,
    8,
    NOTE_D5,
    8,
    NOTE_CS5,
    8,
    NOTE_B4,
    8,
    NOTE_CS5,
    8,
    NOTE_D5,
    8,
    NOTE_CS5,
    8,
    NOTE_D5,
    8,
    NOTE_DS5,
    8,
    NOTE_E5,
    8,
    REST,
    8,
    REST,
    8,
    NOTE_B5,
    8,
    NOTE_CS6,
    8,
    NOTE_D6,
    8,
    NOTE_G5,
    8,
    NOTE_A5,
    8,
    NOTE_B5,
    8,
    NOTE_A5,
    8,
    NOTE_B5,
    8,
    NOTE_CS6,
    8,
    NOTE_FS5,
    8,
    NOTE_G5,
    8,
    NOTE_A5,
    8,
    NOTE_G5,
    8,
    NOTE_A5,
    8,
    NOTE_B5,
    8,
    NOTE_E5,
    8,
    NOTE_FS5,
    8,
    NOTE_G5,
    8,
    NOTE_FS5,
    8,
    NOTE_G5,
    8,
    NOTE_A5,
    8,
    NOTE_D5,
    8,
    NOTE_E5,
    8,
    NOTE_FS5,
    8,
    NOTE_E5,
    8,
    NOTE_DS5,
    8,
    NOTE_D5,
    8,
    NOTE_CS5,
    8,
    NOTE_C5,
    8,
    NOTE_B4,
    8,
    NOTE_AS4,
    8,
    NOTE_A4,
    8,
    NOTE_GS4,
    8,
    NOTE_G4,
    8,
    NOTE_FS4,
    8,
    NOTE_F4,
    8,
    NOTE_E4,
    8,

    REST,
    4,

    NOTE_A3,
    4,
    NOTE_D4,
    8,
    NOTE_D4,
    4,
    NOTE_FS4,
    8,
    NOTE_B4,
    4,
    NOTE_FS4,
    8,
    NOTE_A4,
    4,
    REST,
    8,
    NOTE_A4,
    4,
    NOTE_B4,
    8,
    NOTE_A4,
    4,
    NOTE_FS4,
    8,
    NOTE_G4,
    4,
    NOTE_FS4,
    8,
    NOTE_E4,
    4,
    REST,
    8,
    NOTE_B3,
    4,
    NOTE_E4,
    8,
    NOTE_E4,
    4,
    NOTE_G4,
    8,
    NOTE_CS5,
    4,
    NOTE_CS5,
    8,
    NOTE_B4,
    4,
    NOTE_A4,
    8,
    NOTE_G4,
    -4,
    NOTE_G4,
    4,
    NOTE_FS4,
    8,
    NOTE_B3,
    4,
    NOTE_CS4,
    4,
    NOTE_D4,
    4,
    NOTE_E4,
    4,

    REST,
    4,

    NOTE_A3,
    4,
    NOTE_D4,
    8,
    NOTE_D4,
    4,
    NOTE_FS4,
    8,
    NOTE_B4,
    4,
    NOTE_FS4,
    8,
    NOTE_A4,
    4,
    REST,
    8,
    NOTE_A4,
    4,
    NOTE_B4,
    8,
    NOTE_A4,
    4,
    NOTE_FS4,
    8,
    NOTE_G4,
    4,
    NOTE_FS4,
    8,
    NOTE_E4,
    4,
    REST,
    8,
    NOTE_B3,
    4,
    NOTE_E4,
    8,
    NOTE_E4,
    4,
    NOTE_G4,
    8,
    NOTE_CS5,
    4,
    NOTE_CS5,
    8,
    NOTE_B4,
    4,
    NOTE_A4,
    8,
    NOTE_G4,
    -4,
    NOTE_G4,
    4,
    NOTE_FS4,
    8,
    NOTE_E4,
    8,
    NOTE_CS4,
    4,
    NOTE_E4,
    4,
    NOTE_D4,
    4,
    REST,
    4,

    NOTE_B4,
    4,
    REST,
    8,
    NOTE_B4,
    4,
    NOTE_A4,
    8,
    NOTE_G4,
    8,
    NOTE_A4,
    8,
    NOTE_B4,
    8,
    NOTE_A4,
    8,
    REST,
    4,
    NOTE_E4,
    4,
    NOTE_FS4,
    8,
    NOTE_GS4,
    4,
    NOTE_E4,
    8,
    NOTE_A4,
    4,
    REST,
    2,

    NOTE_B4,
    4,
    REST,
    8,
    NOTE_A4,
    4,
    REST,
    8,
    NOTE_G4,
    4,
    REST,
    2,
    NOTE_E4,
    4,
    NOTE_E4,
    8,
    NOTE_CS5,
    8,
    REST,
    8,
    NOTE_B4,
    8,
    NOTE_A4,
    8,
    REST,
    8,
    NOTE_B4,
    8,
    NOTE_A4,
    8,
    REST,
    8,
    NOTE_G4,
    8,
    REST,
    -4,

    NOTE_A4,
    8,
    REST,
    8,
    NOTE_B4,
    8,
    NOTE_FS4,
    2,
    NOTE_E4,
    8,
    NOTE_D4,
    2,

};

int notes = sizeof(melody) / sizeof(melody[0]) / 2;

// this calculates the duration of a whole note in ms
int wholenote = (60000 * 4) / tempo;

int divider = 0, noteDuration = 0;

void Doraemonsong(int BUZZER_PIN, BluetoothSerial &bt)
{
    while (true)
    {
        if (shouldStop(bt))
        {
            noTone(BUZZER_PIN);
            break;
        }

        for (int thisNote = 0; thisNote < notes * 2; thisNote += 2)
        {
            if (shouldStop(bt)) {  
                noTone(BUZZER_PIN);
                return;
            }

            divider = melody[thisNote + 1];
            if (divider > 0)
            {
                noteDuration = (wholenote) / divider;
            }
            else if (divider < 0)
            {
                noteDuration = (wholenote) / abs(divider);
                noteDuration *= 1.5;
            }

            tone(BUZZER_PIN, melody[thisNote], noteDuration * 0.9);

            // เช็กระหว่างรอ delay
            unsigned long start = millis();
            while (millis() - start < noteDuration)
            {
                if (shouldStop(bt)) {
                    noTone(BUZZER_PIN);
                    return;
                }
                delay(5); 
            }

            noTone(BUZZER_PIN);
        }
    }
}

